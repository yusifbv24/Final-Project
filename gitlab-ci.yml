stages:
  - build
  - test
  - package
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  DOCKER_HOST: tcp://docker:2375
  NUGET_PACKAGES: .nuget
  DOTNET_VERSION: "8.0"

# Cache dependencies across jobs
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .nuget/

before_script:
  - dotnet --version

build:
  stage: build
  image: mcr.microsoft.com/dotnet/sdk:8.0
  services:
    - docker:dind
  script:
    - dotnet restore
    - dotnet build --no-restore
  artifacts:
    paths:
      - "**/bin/Debug/net8.0/"
    expire_in: 1 day

test:
  stage: test
  image: mcr.microsoft.com/dotnet/sdk:8.0
  services:
    - postgres:latest
  variables:
    POSTGRES_PASSWORD: postgres
    POSTGRES_USER: postgres
    POSTGRES_DB: test_db
    POSTGRES_HOST_AUTH_METHOD: trust
  script:
    - dotnet test --no-restore --collect:"XPlat Code Coverage" --settings coverlet.runsettings
    - dotnet tool install -g dotnet-reportgenerator-globaltool
    - reportgenerator -reports:"**/coverage.cobertura.xml" -targetdir:"coveragereport" -reporttypes:Html
  artifacts:
    paths:
      - coveragereport
    reports:
      coverage_report:
        coverage_format: cobertura
        path: "**/coverage.cobertura.xml"
    expire_in: 7 days

package:
  stage: package
  image: docker:20
  services:
    - docker:dind
  script:
    - docker build -t $CI_REGISTRY_IMAGE/product-service:$CI_COMMIT_SHA -f ProductService.API/Dockerfile .
    - docker build -t $CI_REGISTRY_IMAGE/inventory-service:$CI_COMMIT_SHA -f InventoryService.API/Dockerfile .
    - docker build -t $CI_REGISTRY_IMAGE/order-service:$CI_COMMIT_SHA -f OrderService.API/Dockerfile .
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE/product-service:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/inventory-service:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/order-service:$CI_COMMIT_SHA
  only:
    - main

deploy:staging:
  stage: deploy
  image: docker:20
  services:
    - docker:dind
  script:
    - apk add --no-cache curl
    - curl -LO "https://dl.k8s.io/release/stable.txt"
    - curl -LO "https://dl.k8s.io/release/$(cat stable.txt)/bin/linux/amd64/kubectl"
    - chmod +x kubectl && mv kubectl /usr/local/bin/
    - kubectl config set-cluster k8s --server=$K8S_SERVER --insecure-skip-tls-verify=true
    - kubectl config set-credentials deploy --token=$K8S_TOKEN
    - kubectl config set-context deploy --cluster=k8s --user=deploy
    - kubectl config use-context deploy
    - kubectl set image deployment/product-service product-service=$CI_REGISTRY_IMAGE/product-service:$CI_COMMIT_SHA --namespace=staging
    - kubectl set image deployment/inventory-service inventory-service=$CI_REGISTRY_IMAGE/inventory-service:$CI_COMMIT_SHA --namespace=staging
    - kubectl set image deployment/order-service order-service=$CI_REGISTRY_IMAGE/order-service:$CI_COMMIT_SHA --namespace=staging
  environment:
    name: staging
  only:
    - main