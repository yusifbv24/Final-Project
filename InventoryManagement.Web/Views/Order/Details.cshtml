@model InventoryManagement.Web.Models.Order.OrderViewModel

@{
    ViewData["Title"] = "Order Details";
}

<div class="container mt-4">
    <h1>Order Details</h1>

    <div class="card mt-4">
        <div class="card-header">
            <div class="d-flex justify-content-between align-items-center">
                <h3>Order #@Model.Id</h3>
                <span class="badge bg-@GetStatusColor(Model.Status)">@Model.Status</span>
            </div>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <h5>Customer Information</h5>
                    <dl class="row">
                        <dt class="col-sm-4">Name:</dt>
                        <dd class="col-sm-8">@Model.CustomerName</dd>

                        <dt class="col-sm-4">Email:</dt>
                        <dd class="col-sm-8">@Model.CustomerEmail</dd>

                        <dt class="col-sm-4">Order Date:</dt>
                        <dd class="col-sm-8">@Model.OrderDate.ToString("g")</dd>
                    </dl>
                </div>
                <div class="col-md-6">
                    <h5>Shipping Address</h5>
                    <p>@Model.ShippingAddress</p>

                    <h5 class="mt-3">Order Status</h5>
                    <div class="btn-group">
                        <button type="button" class="btn btn-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                            Update Status
                        </button>
                        <ul class="dropdown-menu">
                            @foreach (var status in Enum.GetValues<InventoryManagement.Web.Models.Order.OrderStatus>())
                            {
                                <li><a class="dropdown-item" href="#" data-status="@((int)status)">@status</a></li>
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="card mt-4">
        <div class="card-header">
            <h3>Order Items</h3>
        </div>
        <div class="card-body">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Product</th>
                        <th>Price</th>
                        <th>Quantity</th>
                        <th class="text-end">Subtotal</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.Items)
                    {
                        <tr>
                            <td>@item.ProductName</td>
                            <td>$@item.Price.ToString("F2")</td>
                            <td>@item.Quantity</td>
                            <td class="text-end">$@((item.Price * item.Quantity).ToString("F2"))</td>
                        </tr>
                    }
                </tbody>
                <tfoot>
                    <tr>
                        <th colspan="3" class="text-end">Total:</th>
                        <th class="text-end">$@Model.TotalAmount.ToString("F2")</th>
                    </tr>
                </tfoot>
            </table>
        </div>
        <div class="card-footer">
            <a asp-action="Index" class="btn btn-secondary">Back to List</a>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Connect to SignalR
            const connection = new signalR.HubConnectionBuilder()
                .withUrl('@Url.Content("~/hubs/orders")')
                .withAutomaticReconnect()
                .build();

            // Order status changed event
            connection.on("OrderStatusChanged", (orderId, status) => {
                if (orderId === @Model.Id) {
                    // Update the status badge
                    const statusBadge = document.querySelector('.badge');
                    const statusColors = {
                        'Pending': 'secondary',
                        'Processing': 'primary',
                        'Shipped': 'info',
                        'Delivered': 'success',
                        'Cancelled': 'danger'
                    };

                    statusBadge.className = `badge bg-${statusColors[status] || 'secondary'}`;
                    statusBadge.textContent = status;

                    toastr.info(`Order status changed to ${status}`);
                }
            });

            // Start the connection
            connection.start()
                .then(() => console.log("Connected to Order hub"))
                .catch(err => console.error("Error connecting to Order hub:", err));

            // Handle status update clicks
            document.querySelectorAll('.dropdown-item').forEach(item => {
                item.addEventListener('click', function(e) {
                    e.preventDefault();

                    const status = this.getAttribute('data-status');

                    // Call API to update status
                    fetch(`/Order/UpdateStatus?id=@Model.Id&status=${status}`, {
                        method: 'POST'
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Status update failed');
                        }
                        // Success is handled by SignalR notification
                    })
                    .catch(error => {
                        console.error('Error updating order status:', error);
                        toastr.error('Error updating order status');
                    });
                });
            });
        });
    </script>
}

@functions {
    string GetStatusColor(InventoryManagement.Web.Models.Order.OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Pending => "secondary",
            OrderStatus.Processing => "primary",
            OrderStatus.Shipped => "info",
            OrderStatus.Delivered => "success",
            OrderStatus.Cancelled => "danger",
            _ => "secondary"
        };
    }
}