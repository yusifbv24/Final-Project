@model IEnumerable<InventoryManagement.Web.Models.Order.OrderViewModel>

@{
    ViewData["Title"] = "Orders";
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Orders</h1>
        <a asp-action="Create" class="btn btn-success">
            <i class="bi bi-plus-circle"></i> Create New Order
        </a>
    </div>

    <div class="card">
        <div class="card-body">
            @if (!Model.Any())
            {
                <div class="alert alert-info">
                    <i class="bi bi-info-circle"></i> No orders found. Click "Create New Order" to add your first order.
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-striped">
                        <thead class="table-dark">
                            <tr>
                                <th>Order #</th>
                                <th>Customer</th>
                                <th>Email</th>
                                <th>Date</th>
                                <th>Total</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var order in Model.OrderBy(o => o.OrderDate).Reverse())
                            {
                                <tr id="order-row-@order.Id">
                                    <td>
                                        <strong>#@order.Id</strong>
                                    </td>
                                    <td>@order.CustomerName</td>
                                    <td>@order.CustomerEmail</td>
                                    <td>@order.OrderDate.ToString("MMM dd, yyyy")</td>
                                    <td>
                                        <strong class="text-success">$@order.TotalAmount.ToString("N2")</strong>
                                    </td>
                                    <td>
                                        <span class="badge bg-@GetStatusColor(order.Status) status-badge" id="status-@order.Id">
                                            @order.Status
                                        </span>
                                    </td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <a asp-action="Details" asp-route-id="@order.Id" class="btn btn-sm btn-primary">
                                                <i class="bi bi-eye"></i> View
                                            </a>
                                            <div class="btn-group" role="group">
                                                <button type="button" class="btn btn-sm btn-outline-secondary dropdown-toggle"
                                                        data-bs-toggle="dropdown" aria-expanded="false">
                                                    <i class="bi bi-arrow-repeat"></i> Status
                                                </button>
                                                <ul class="dropdown-menu">
                                                    @foreach (var status in Enum.GetValues<OrderStatus>())
                                                    {
                                                        <li>
                                                            @if (status == order.Status)
                                                            {
                                                                <button class="dropdown-item" disabled>
                                                                    <span class="badge bg-@GetStatusColor(status) me-2">@status</span>
                                                                    @status (Current)
                                                                </button>
                                                            }
                                                            else
                                                            {
                                                                <button class="dropdown-item status-update-btn"
                                                                        data-order-id="@order.Id"
                                                                        data-status="@((int)status)"
                                                                        data-status-text="@status">
                                                                    <span class="badge bg-@GetStatusColor(status) me-2">@status</span>
                                                                    @status
                                                                </button>
                                                            }
                                                        </li>
                                                    }
                                                </ul>
                                            </div>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

<!-- Status Update Modal -->
<div class="modal fade" id="statusUpdateModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Update Order Status</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to update the status of Order <strong id="modal-order-number"></strong>?</p>
                <div class="alert alert-info">
                    <strong>From:</strong> <span id="modal-current-status"></span><br>
                    <strong>To:</strong> <span id="modal-new-status"></span>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmStatusUpdate">
                    <i class="bi bi-check-circle"></i> Update Status
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Hidden form for status updates -->
<form id="statusUpdateForm" asp-action="UpdateStatus" method="post" style="display: none;">
    @Html.AntiForgeryToken()
    <input type="hidden" id="orderIdInput" name="id" />
    <input type="hidden" id="statusInput" name="status" />
</form>

@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const statusUpdateModal = new bootstrap.Modal(document.getElementById('statusUpdateModal'));
            const statusUpdateForm = document.getElementById('statusUpdateForm');
            let currentOrderId = null;
            let newStatus = null;
            let newStatusText = null;

            const statusColors = {
                'Pending': 'secondary',
                'Processing': 'primary',
                'Shipped': 'info',
                'Delivered': 'success',
                'Cancelled': 'danger'
            };

            // Handle status update button clicks
            document.querySelectorAll('.status-update-btn').forEach(button => {
                button.addEventListener('click', function(e) {
                    e.preventDefault();

                    currentOrderId = this.getAttribute('data-order-id');
                    newStatus = this.getAttribute('data-status');
                    newStatusText = this.getAttribute('data-status-text');

                    const currentStatusElement = document.getElementById(`status-${currentOrderId}`);
                    const currentStatus = currentStatusElement.textContent.trim();

                    // Update modal content
                    document.getElementById('modal-order-number').textContent = `#${currentOrderId}`;
                    document.getElementById('modal-current-status').textContent = currentStatus;
                    document.getElementById('modal-new-status').textContent = newStatusText;

                    statusUpdateModal.show();
                });
            });

            // Confirm status update
            document.getElementById('confirmStatusUpdate').addEventListener('click', function() {
                updateOrderStatus();
            });

            function updateOrderStatus() {
                const confirmBtn = document.getElementById('confirmStatusUpdate');
                const originalText = confirmBtn.innerHTML;

                // Show loading state
                confirmBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Updating...';
                confirmBtn.disabled = true;

                // Set form values
                document.getElementById('orderIdInput').value = currentOrderId;
                document.getElementById('statusInput').value = newStatus;

                // Get form data
                const formData = new FormData(statusUpdateForm);

                fetch(statusUpdateForm.action, {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                .then(async response => {
                    const data = await response.json();

                    if (data.success) {
                        updateOrderStatusUI(currentOrderId, newStatusText);
                        statusUpdateModal.hide();
                        showToast('Success', 'Order status updated successfully!', 'success');
                    } else {
                        throw new Error(data.message || 'Failed to update status');
                    }
                })
                .catch(error => {
                    console.error('Error updating order status:', error);
                    showToast('Error', error.message || 'Failed to update order status. Please try again.', 'error');
                })
                .finally(() => {
                    confirmBtn.innerHTML = originalText;
                    confirmBtn.disabled = false;
                });
            }

            function updateOrderStatusUI(orderId, status) {
                const statusBadge = document.getElementById(`status-${orderId}`);
                if (statusBadge) {
                    statusBadge.textContent = status;
                    statusBadge.className = `badge bg-${statusColors[status]} status-badge`;

                    const row = document.getElementById(`order-row-${orderId}`);
                    if (row) {
                        row.classList.add('table-warning');
                        setTimeout(() => row.classList.remove('table-warning'), 3000);
                    }
                }

                // Update dropdown options
                const dropdown = document.querySelector(`[data-order-id="${orderId}"]`)?.closest('.btn-group');
                if (dropdown) {
                    const dropdownButtons = dropdown.querySelectorAll('.status-update-btn');
                    dropdownButtons.forEach(btn => {
                        const btnStatus = btn.getAttribute('data-status-text');
                        btn.disabled = btnStatus === status;
                        if (btnStatus === status) {
                            btn.innerHTML = `<span class="badge bg-${statusColors[status]} me-2">${status}</span>${status} (Current)`;
                        }
                    });
                }
            }

            function showToast(title, message, type) {
                const toastContainer = document.getElementById('toast-container') || createToastContainer();
                const toastId = 'toast-' + Date.now();
                const bgClass = type === 'success' ? 'bg-success' : 'bg-danger';

                const toastHTML = `
                    <div id="${toastId}" class="toast ${bgClass} text-white" role="alert" aria-live="assertive" aria-atomic="true">
                        <div class="toast-header ${bgClass} text-white border-0">
                            <strong class="me-auto">${title}</strong>
                            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
                        </div>
                        <div class="toast-body">
                            ${message}
                        </div>
                    </div>
                `;

                toastContainer.insertAdjacentHTML('beforeend', toastHTML);
                const toast = new bootstrap.Toast(document.getElementById(toastId));
                toast.show();

                // Remove toast after it's hidden
                document.getElementById(toastId).addEventListener('hidden.bs.toast', function() {
                    this.remove();
                });
            }

            function createToastContainer() {
                const container = document.createElement('div');
                container.id = 'toast-container';
                container.className = 'toast-container position-fixed bottom-0 end-0 p-3';
                container.style.zIndex = '1070';
                document.body.appendChild(container);
                return container;
            }

            // SignalR connection for real-time updates
            const connection = new signalR.HubConnectionBuilder()
                .withUrl('/hubs/orders')
                .withAutomaticReconnect()
                .build();

            connection.on("OrderStatusChanged", (orderId, status) => {
                updateOrderStatusUI(orderId, status);
                showToast('Update', `Order #${orderId} status changed to ${status}`, 'success');
            });

            connection.start()
                .then(() => console.log("Connected to Order hub"))
                .catch(err => console.error("Error connecting to Order hub:", err));
        });
    </script>
}

@functions {
    string GetStatusColor(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Pending => "secondary",
            OrderStatus.Processing => "primary",
            OrderStatus.Shipped => "info",
            OrderStatus.Delivered => "success",
            OrderStatus.Cancelled => "danger",
            _ => "secondary"
        };
    }
}