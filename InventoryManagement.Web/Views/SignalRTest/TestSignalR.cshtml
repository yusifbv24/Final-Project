@{
    ViewData["Title"] = "SignalR Test";
}

<div class="container mt-4">
    <h1>SignalR Connection Test</h1>

    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h3>Connection Status</h3>
                </div>
                <div class="card-body">
                    <div id="connection-status">
                        <p>Product Hub: <span id="product-status" class="badge bg-secondary">Disconnected</span></p>
                        <p>Inventory Hub: <span id="inventory-status" class="badge bg-secondary">Disconnected</span></p>
                        <p>Order Hub: <span id="order-status" class="badge bg-secondary">Disconnected</span></p>
                    </div>
                </div>
            </div>

            <div class="card mt-3">
                <div class="card-header">
                    <h3>Test Actions</h3>
                </div>
                <div class="card-body">
                    <button class="btn btn-primary" id="test-product-btn">Test Product Created</button>
                    <button class="btn btn-success" id="test-order-btn">Test Order Created</button>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h3>Events Received</h3>
                </div>
                <div class="card-body">
                    <div id="events-log" style="height: 400px; overflow-y: auto;">
                        <p class="text-muted">Waiting for events...</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    <script>
        // Connection objects
        const connections = {
            product: null,
            inventory: null,
            order: null
        };

        // Function to log events
        function logEvent(message, type = 'info') {
            const log = document.getElementById('events-log');
            const timestamp = new Date().toLocaleTimeString();
            const badge = type === 'error' ? 'danger' : type;

            const entry = document.createElement('div');
            entry.className = 'mb-2';
            entry.innerHTML = `<span class="badge bg-${badge}">${timestamp}</span> ${message}`;

            log.insertBefore(entry, log.firstChild);

            // Remove old entries if more than 20
            while (log.children.length > 20) {
                log.removeChild(log.lastChild);
            }
        }

        // Function to update connection status
        function updateStatus(hub, status) {
            const element = document.getElementById(`${hub}-status`);
            element.textContent = status;
            element.className = status === 'Connected' ? 'badge bg-success' : 'badge bg-danger';
        }

        // Setup Product Hub connection
        function setupProductHub() {
            connections.product = new signalR.HubConnectionBuilder()
                .withUrl('/hubs/products')
                .withAutomaticReconnect()
                .configureLogging(signalR.LogLevel.Information)
                .build();

            connections.product.on('ProductCreated', (productId, name) => {
                logEvent(`Product Created: ${name} (ID: ${productId})`, 'success');
            });

            connections.product.on('ProductUpdated', (productId, name) => {
                logEvent(`Product Updated: ${name} (ID: ${productId})`, 'info');
            });

            connections.product.onclose(() => {
                updateStatus('product', 'Disconnected');
                logEvent('Product hub disconnected', 'error');
            });

            connections.product.onreconnecting(() => {
                updateStatus('product', 'Reconnecting...');
                logEvent('Product hub reconnecting...', 'warning');
            });

            connections.product.onreconnected(() => {
                updateStatus('product', 'Connected');
                logEvent('Product hub reconnected', 'success');
            });

            connections.product.start()
                .then(() => {
                    updateStatus('product', 'Connected');
                    logEvent('Product hub connected', 'success');
                })
                .catch(err => {
                    updateStatus('product', 'Error');
                    logEvent(`Product hub error: ${err}`, 'error');
                    console.error(err);
                });
        }

        // Setup Inventory Hub connection
        function setupInventoryHub() {
            connections.inventory = new signalR.HubConnectionBuilder()
                .withUrl('/hubs/inventory')
                .withAutomaticReconnect()
                .configureLogging(signalR.LogLevel.Information)
                .build();

            connections.inventory.on('InventoryUpdated', (inventoryId, productId, quantity) => {
                logEvent(`Inventory Updated: ID ${inventoryId}, Product ${productId}, Qty: ${quantity}`, 'info');
            });

            connections.inventory.on('LowStockAlert', (inventoryId, productId, locationId, quantity, threshold) => {
                logEvent(`Low Stock Alert: Product ${productId} at Location ${locationId} - ${quantity}/${threshold}`, 'warning');
            });

            connections.inventory.onclose(() => {
                updateStatus('inventory', 'Disconnected');
                logEvent('Inventory hub disconnected', 'error');
            });

            connections.inventory.start()
                .then(() => {
                    updateStatus('inventory', 'Connected');
                    logEvent('Inventory hub connected', 'success');
                })
                .catch(err => {
                    updateStatus('inventory', 'Error');
                    logEvent(`Inventory hub error: ${err}`, 'error');
                    console.error(err);
                });
        }

        // Setup Order Hub connection
        function setupOrderHub() {
            connections.order = new signalR.HubConnectionBuilder()
                .withUrl('/hubs/orders')
                .withAutomaticReconnect()
                .configureLogging(signalR.LogLevel.Information)
                .build();

            connections.order.on('OrderCreated', (orderId, customerName) => {
                logEvent(`Order Created: ${customerName} (ID: ${orderId})`, 'success');
            });

            connections.order.on('OrderStatusChanged', (orderId, status) => {
                logEvent(`Order Status Changed: Order ${orderId} -> ${status}`, 'info');
            });

            connections.order.onclose(() => {
                updateStatus('order', 'Disconnected');
                logEvent('Order hub disconnected', 'error');
            });

            connections.order.start()
                .then(() => {
                    updateStatus('order', 'Connected');
                    logEvent('Order hub connected', 'success');
                })
                .catch(err => {
                    updateStatus('order', 'Error');
                    logEvent(`Order hub error: ${err}`, 'error');
                    console.error(err);
                });
        }

        // Test buttons
        document.getElementById('test-product-btn').addEventListener('click', function() {
            fetch('/SignalRTest/SendTestProductCreated', { method: 'POST' })
                .then(response => response.json())
                .then(data => {
                    logEvent(`Test sent: Product ${data.productName} (ID: ${data.productId})`, 'primary');
                })
                .catch(err => {
                    logEvent(`Error sending test: ${err}`, 'error');
                });
        });

        document.getElementById('test-order-btn').addEventListener('click', function() {
            fetch('/SignalRTest/SendTestOrderCreated', { method: 'POST' })
                .then(response => response.json())
                .then(data => {
                    logEvent(`Test sent: Order ${data.orderId} for ${data.customerName}`, 'primary');
                })
                .catch(err => {
                    logEvent(`Error sending test: ${err}`, 'error');
                });
        });

        // Initialize connections
        document.addEventListener('DOMContentLoaded', function() {
            setupProductHub();
            setupInventoryHub();
            setupOrderHub();
        });
    </script>

    <style>
        #events-log {
            font-size: 0.9rem;
            background-color: #f8f9fa;
            padding: 10px;
            border-radius: 5px;
        }

            #events-log .badge {
                font-size: 0.8rem;
            }
    </style>
}