@model InventoryManagement.Web.Models.Inventory.CreateInventoryViewModel

@{
    ViewData["Title"] = "Create Inventory";
    var products = ViewBag.Products as List<InventoryManagement.Web.Models.Product.ProductViewModel> ?? new List<InventoryManagement.Web.Models.Product.ProductViewModel>();
    var locations = ViewBag.Locations as List<InventoryManagement.Web.Models.Inventory.LocationViewModel> ?? new List<InventoryManagement.Web.Models.Inventory.LocationViewModel>();
}

<div class="container mt-4">
    <h1>Create New Inventory</h1>

    <form asp-action="Create" method="post">
        <div class="card mt-4">
            <div class="card-header">
                <h4>Inventory Information</h4>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label asp-for="ProductId" class="form-label">Product</label>
                            <select asp-for="ProductId" class="form-select" required>
                                <option value="">-- Select Product --</option>
                                @foreach (var product in products)
                                {
                                    <option value="@product.Id">@product.Name (@product.SKU)</option>
                                }
                            </select>
                            <span asp-validation-for="ProductId" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label asp-for="LocationId" class="form-label">Location</label>
                            <select asp-for="LocationId" class="form-select" required>
                                <option value="">-- Select Location --</option>
                                @foreach (var location in locations)
                                {
                                    <option value="@location.Id">@location.Name (@location.Code)</option>
                                }
                            </select>
                            <span asp-validation-for="LocationId" class="text-danger"></span>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label asp-for="Quantity" class="form-label">Initial Quantity</label>
                            <input asp-for="Quantity" class="form-control" type="number" min="0" value="0" required />
                            <span asp-validation-for="Quantity" class="text-danger"></span>
                            <div class="form-text">Enter the initial quantity for this inventory item.</div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="card-footer">
                <button type="submit" class="btn btn-success">
                    <i class="bi bi-plus-circle"></i> Create Inventory
                </button>
                <a asp-action="Index" class="btn btn-secondary">
                    <i class="bi bi-arrow-left"></i> Back to List
                </a>
            </div>
        </div>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const productSelect = document.getElementById('ProductId');
            const locationSelect = document.getElementById('LocationId');

            // Add change event listeners for better UX
            productSelect.addEventListener('change', function() {
                if (this.value) {
                    this.classList.add('is-valid');
                    this.classList.remove('is-invalid');
                } else {
                    this.classList.remove('is-valid');
                }
            });

            locationSelect.addEventListener('change', function() {
                if (this.value) {
                    this.classList.add('is-valid');
                    this.classList.remove('is-invalid');
                } else {
                    this.classList.remove('is-valid');
                }
            });

            // Check for existing inventory combination
            function checkExistingInventory() {
                const productId = productSelect.value;
                const locationId = locationSelect.value;

                if (productId && locationId) {
                    // In a real implementation, you might want to check if this combination already exists
                    // via AJAX call to prevent duplicate inventory entries
                }
            }

            productSelect.addEventListener('change', checkExistingInventory);
            locationSelect.addEventListener('change', checkExistingInventory);
        });
    </script>
}