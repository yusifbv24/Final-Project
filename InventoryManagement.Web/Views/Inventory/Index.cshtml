@model IEnumerable<InventoryManagement.Web.Models.Inventory.InventoryViewModel>

@{
    ViewData["Title"] = "Inventory";
}

<div class="container mt-4">
    <h1>Inventory</h1>

    <table class="table table-striped mt-4">
        <thead>
            <tr>
                <th>ID</th>
                <th>Product</th>
                <th>Location</th>
                <th>Quantity</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody id="inventory-table-body">
            @foreach (var inventory in Model)
            {
                <tr id="inventory-@inventory.Id">
                    <td>@inventory.Id</td>
                    <td><a asp-controller="Product" asp-action="Details" asp-route-id="@inventory.ProductId">@inventory.ProductName</a></td>
                    <td>@inventory.LocationName</td>
                    <td class="quantity-value">@inventory.Quantity</td>
                    <td>
                        @if (inventory.Quantity > 10)
                        {
                            <span class="badge bg-success">In Stock</span>
                        }
                        else if (inventory.Quantity > 0)
                        {
                            <span class="badge bg-warning">Low Stock</span>
                        }
                        else
                        {
                            <span class="badge bg-danger">Out of Stock</span>
                        }
                    </td>
                    <td>
                        <a asp-action="Details" asp-route-id="@inventory.Id" class="btn btn-sm btn-primary">Details</a>
                        <button class="btn btn-sm btn-success adjust-stock" data-id="@inventory.Id" data-action="add">+ Add</button>
                        <button class="btn btn-sm btn-danger adjust-stock" data-id="@inventory.Id" data-action="remove">- Remove</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<!-- Add/Remove Stock Modal -->
<div class="modal fade" id="adjustStockModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalTitle">Adjust Stock</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="inventoryId" />
                <input type="hidden" id="actionType" />

                <div class="mb-3">
                    <label for="quantity" class="form-label">Quantity</label>
                    <input type="number" class="form-control" id="quantity" min="1" value="1" />
                </div>

                <div class="mb-3">
                    <label for="reference" class="form-label">Reference</label>
                    <input type="text" class="form-control" id="reference" placeholder="Reference" />
                </div>

                <div class="mb-3">
                    <label for="notes" class="form-label">Notes</label>
                    <textarea class="form-control" id="notes" rows="3" placeholder="Notes"></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveAdjustment">Save</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Connect to SignalR
            const connection = new signalR.HubConnectionBuilder()
                .withUrl('@Url.Content("~/hubs/inventory")')
                .withAutomaticReconnect()
                .build();

            // Inventory updated event
            connection.on("InventoryUpdated", (inventoryId, productId, quantity) => {
                const row = document.getElementById(`inventory-${inventoryId}`);
                if (row) {
                    const quantityCell = row.querySelector('.quantity-value');
                    if (quantityCell) {
                        // Highlight the change
                        quantityCell.classList.add('bg-warning');

                        // Update the value
                        const oldValue = parseInt(quantityCell.textContent);
                        quantityCell.textContent = quantity;

                        // Update status
                        const statusCell = row.querySelector('.badge');
                        if (statusCell) {
                            if (quantity > 10) {
                                statusCell.className = 'badge bg-success';
                                statusCell.textContent = 'In Stock';
                            } else if (quantity > 0) {
                                statusCell.className = 'badge bg-warning';
                                statusCell.textContent = 'Low Stock';
                            } else {
                                statusCell.className = 'badge bg-danger';
                                statusCell.textContent = 'Out of Stock';
                            }
                        }

                        // Remove highlight after a delay
                        setTimeout(() => {
                            quantityCell.classList.remove('bg-warning');
                        }, 3000);
                    }
                }
            });

            // Low stock alert event
            connection.on("LowStockAlert", (inventoryId, productId, locationId, quantity, threshold) => {
                toastr.warning(`Low stock alert: Inventory #${inventoryId} is below threshold (${quantity}/${threshold})`);
            });

            // Start the connection
            connection.start()
                .then(() => console.log("Connected to Inventory hub"))
                .catch(err => console.error("Error connecting to Inventory hub:", err));

            // Setup adjust stock buttons
            const adjustStockButtons = document.querySelectorAll('.adjust-stock');
            const modal = new bootstrap.Modal(document.getElementById('adjustStockModal'));

            adjustStockButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const inventoryId = this.getAttribute('data-id');
                    const action = this.getAttribute('data-action');

                    document.getElementById('inventoryId').value = inventoryId;
                    document.getElementById('actionType').value = action;
                    document.getElementById('modalTitle').textContent = action === 'add' ? 'Add Stock' : 'Remove Stock';
                    document.getElementById('saveAdjustment').className = action === 'add' ? 'btn btn-success' : 'btn btn-danger';

                    modal.show();
                });
            });

            // Handle save adjustment
            document.getElementById('saveAdjustment').addEventListener('click', function() {
                const inventoryId = document.getElementById('inventoryId').value;
                const action = document.getElementById('actionType').value;
                const quantity = document.getElementById('quantity').value;
                const reference = document.getElementById('reference').value;
                const notes = document.getElementById('notes').value;

                // Call API to adjust stock
                fetch(`/api/inventory/${inventoryId}/${action}-stock`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        quantity: parseInt(quantity),
                        reference: reference,
                        notes: notes
                    })
                })
                .then(response => {
                    if (response.ok) {
                        toastr.success(`Stock ${action === 'add' ? 'added' : 'removed'} successfully`);
                        modal.hide();
                    } else {
                        toastr.error(`Error ${action === 'add' ? 'adding' : 'removing'} stock`);
                    }
                })
                .catch(error => {
                    console.error('Error adjusting stock:', error);
                    toastr.error('Error processing request');
                });
            });
        });
    </script>
}